5250*(0.91 - (qnorm(p = 0.975)*sqrt((0.91*(1-0.91))/5250) ))
(0.805 + (qnorm(p = 0.975)*sqrt((0.805*(1-0.805))/200) ))
0.805 - (qnorm(p = 0.975)*sqrt((0.805*(1-0.805))/200) )
(0.60 + (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
(0.60 + (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
(0.60 - (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
#Q5 :
1000*(0.60 + (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
1000*(0.60 - (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
#Q5 :
50*(0.60 + (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
50*(0.60 - (qnorm(p = 0.975)*sqrt((0.60*(1-0.60))/1000) ))
Notation <- matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1),nrow = 5)
Notation
Data <- matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1),nrow = 5)
colnames(Notation) <- Year
colnames(Data) <- Year
Name <- c("Aman","NEo","Henery","Jeet","Action")
Year <- c("1997","2008","2012","2000","3000")
Data <- matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1),nrow = 5)
colnames(Data) <- Year
Data
df <- data.frame(Name,Data)
df
install.packages("tidyr")
library(tidyr)
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
ff <- gather(data = df,key = Year,value = Namessss,convert = 2:6)
ff
ff <- gather(data = df,key = Year,value = Namessss,convert = 3:6)
ff
df
ff <- gather(df,Year,Namessss,3:6)
ff
ff <- gather(df,Year,Namessss,2:6)
ff
ff <- gather(data = df,Year,Namessss,2:6)
ff
ff <- gather(data = df,factor_key = Year,Namessss,2:6)
ff
ff <- gather(data = df,factor_key = Year,key = Namessss,2:6)
ff
ff <- gather(data = df,factor_key = Year,key = Namessss,2:6)
ff <- gather(data = df,Year,Namessss,2:6)
ff <- gather(data = df,value = Year,Namessss,2:6)
ff
ff <- gather(data = df,Year,value = Namessss,2:6)
ff
ff <- gather(data = df,key = Year,value = Namessss,2:6)
ff
ff <- gather(data = df,key = Year,value = check,2:6)
ff
colnames(df) <- Year
df
colnames(df) <- c("Name",Year)
df
ff <- gather(data = df,key = Year,value = check,2:6)
ff
#Spread
spread(ff)
#Spread
spread(data = ff,key = Year,value = check)
#Gather
Fame <- c("Birth","Matrix","Movie","Child","Idea")
df <- data.frame(Name,Fame,Data)
colnames(df) <- c("Name","Fame",Year)
df
ff <- gather(data = df,key = Year,value = check,2:6)
ff
ff <- gather(data = df,key = Year,value = check,3:7)
ff
#Spread
spread(data = ff,key = Year,value = check)
#filter
filter(x = ff,filter = Name=="Aman")
#filter
filter(x = ff)
#filter
filter(x = ff,Name=="Aman")
ff
#filter
filter(x = ff,Name==Aman)
#filter
filter(x = ff,Name=="Aman")
#filter
filter(x = ff,Name="Aman")
#filter
filter(x = ff,(Name=="Aman"))
#filter
filter(x = ff,filter = (Name=="Aman"))
ff
#filter
filter(x = ff,filter = (Year==1997))
#filter
filter(x = ff,filter = (Year=="1997"))
ff
#filter
filter(x = ff,check==1)
#filter
filter(x = ff,check=="1")
ff
#filter
filter(ff,check=="1")
#filter
filter(ff,check==1)
ff
#filter
filter(ff,check==1)
#filter
filter(ff,Name=="Aman:)
#filter
filter(ff,Name=="Aman")
filter(ff,Name=="Aman")
ff$Name
filter(ff,Name=="NEo")
#filter
library(dplyr)
filter(ff,Name=="NEo")
filter(ff,Name=="NEo")
filter(ff,Name=="NEo")
#filter
library(dplyr) #Keep in mind that, there is another filter in stat package
A <- c(rep(c("Aman","Jagadish"),3))
A
B <- 1:6
A <- c(rep(c("Aman","Jagadish"),3))
B <- 1:6
B
A
df <- data.frame(A,B)
df
df$A <- 1
df
df <- data.frame(A,B)
df$A[df$A=="Aman"] <- 1
df <- data.frame(A,B)
df[A=="Aman"]
df[A=="Aman",]
df$A=="Aman"
df[df$A=="Aman"]
df$A=="Aman"
df$A=="Aman" <- 1
df$A=="Aman"
df <- data.frame(A,B)
df$A=="Aman"
df
df$A=="Aman"
df <- sort(x = B,decreasing = T)
df
df <- sort(x = B,decreasing = T)
df
df <- sort(x = df,decreasing = T)
df
df$A=="Aman"
df <- data.frame(A,B)
df <- sort(x = df,decreasing = T)
df <- sort(x = df$B,decreasing = T)
df
df <- df[c(B,A),]
df
df <- data.frame(A,B)
df <- df[c(B,A),]
df
df <- data.frame(A,B)
df
df <- df[c(B,A),]
df
df <- data.frame(A,B)
df <- df[c(2,1),]
df
df <- df[,c(2,1)]
df
df <- data.frame(A,B)
df <- df[,c(2,1)]
df
df <- sort(df[,c(2,1)])
df <- sorted(df[,c(2,1)])
df <- df[,c(2,1)]
df
sortedXyData(data = df,x = c)
sortedXyData(data = df,x = 1)
sortedXyData(data = df,x = 1,y=2)
sortedXyData(data = df,x = A,y=B)
sortedXyData(data = df,x = df$A,y=df$B)
sortedXyData(data = df,x = df$A,y=df$B)
A <- c(rep(c("Aman","Jagadish"),3))
B <- 1:6
df <- data.frame(A,B)
sortedXyData(data = df,x = df$A,y=df$B)
df <- sort(x = df$B,decreasing = T)
df
B <- sort(x = df$B,decreasing = T)
B <- sort(x = df$B,decreasing = T)
B <- sort(x = B,decreasing = T)
B
df <- data.frame(A,sort(B))
df
df <- data.frame(A,sort(B,decreasing = F))
df
df <- data.frame(A,sort(B,decreasing = T))
df
df <- data.frame(A,B)
df
df <- df[,c(1,sort(df$B))]
df
df <- data.frame(A,B)
df
df <- data.frame(A,B)
B <- 1:6
df <- data.frame(A,B)
sort(df$B)
df <- df[,c(1,sort(df$B))]
df <- data.frame(A,sort(B,decreasing = T))
df
data()
data("CO2")
df <- data("CO2")
df
data("CO2")
co2
data()
data("cars")
cars
attach(cars)
head(cars)
df <- data.frame(A,B)
df
df2 <- order(df,decreasing = T)
df2
df
df2 <- order(df,decreasing = T)
df2
df
df2 <- order(df)
df2
df[order(df$B),]
df[order(df$B,decreasing = T),]
df[order(df$A,decreasing = T),]
df[order(df$A,decreasing = T),c(2,1)]
df_2 <- factor(x = df$A,levels = c("Jagadish","Aman"),labels = c(1,2))
df_2
df <- data.frame(df,df_2)
df
df_2 <- factor(x = df$A,levels = c("Jagadish"),labels = c(1))
df <- data.frame(df,df_2)
df
df_2 <- factor(x = df$A,levels = c("Jagadish"),labels = c(1))
df <- data.frame(df,df_2)
df
df <- data.frame(df,df_2)
df
df <- data.frame(A,B)
df_1 <- data.frame(A,B)
df_1 <- data.frame(A,B)
df_2 <- factor(x = df$A,levels = c("Jagadish"),labels = c(1))
df_2
df_1
df <- (df_1[,-1],df_2)
df_1[:,-1]
df_1 <- data.frame(A,B)
df_1[,-1]
df <- (df_1[,-1],df_2)
df <- data.frame(df_1[,-1],df_2)
df
df <- data.frame("Index"= df_1[,-1],df_2)
df
df
df_1
df_2
df <- data.frame("Index"= df_1[,-1],df_2)
df
class(df$Index)
class(df$df_2)
# Transformation Encoding
df_2 <- as.numeric(factor(x = df$A,levels = c("Jagadish"),labels = c(1)))
df <- data.frame("Index"= df_1[,-1],df_2)
class(df$df_2)
# Transformation Encoding
df_2 <- as.numeric(factor(x = df$A,levels = c("Jagadish"),labels = c(1)))
df_2
df_2
df <- data.frame("Index"= df_1[,-1],df_2)
# Transformation Encoding
df_2 <- as.integer(factor(x = df$A,levels = c("Jagadish"),labels = c(1)))
df_2
# Transformation Encoding
df_2 <- factor(x = df$A,levels = c("Jagadish"),labels = c(1))
df_2
# Transformation Encoding
df_2 <- factor(x = df$A,levels = c("Jagadish"),labels = c(1))
df_2
df <- data.frame("Index"= df_1[,-1],df_2)
df
# Transformation Encoding
df_2 <- factor(x = df_1$A,levels = c("Jagadish"),labels = c(1))
df_2
# Transformation Encoding
df_2 <- as.integer(factor(x = df_1$A,levels = c("Jagadish"),labels = c(1)))
df <- data.frame("Index"= df_1[,-1],df_2)
class(df$df_2)
# Transformation Encoding
df_2 <- factor(x = df_1$A,levels = c("Jagadish"),labels = c(1))
df <- data.frame("Index"= df_1[,-1],df_2)
class(df$df_2)
# Transformation Encoding
df_2 <- as.numeric(factor(x = df_1$A,levels = c("Jagadish"),labels = c(1)))
df <- data.frame("Index"= df_1[,-1],df_2)
class(df$df_2)
# Transformation Encoding
df_2 <- as.numeric(factor(x = df_1$A,levels = c("Jagadish"),labels = c(1)))
df <- data.frame("Index"= df_1[,-1],df_2)
class(df$df_2)
#Gather
Fame <- c("Birth","Matrix","Movie","Child","Idea")
Name <- c("Aman","NEo","Henery","Jeet","Action")
Year <- c("1997","2008","2012","2000","3000")
Data <- matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1),nrow = 5)
colnames(Data) <- Year
df <- data.frame(Name,Fame,Data)
df
colnames(df) <- c("Name","Fame",Year)
df
#install.packages("tidyr")
library(tidyr)
ff <- gather(data = df,key = Year,value = check,3:7)
ff
df
#Setting the working Directory for my project
setwd("D:\\STUDY PROCESS\\Excelr\\Assignments\\Pending\\Hypothesis testing Assignments")
Faltoons = read.csv("Faltoons.csv")
head(Faltoons)
Faltoons = read.csv("Faltoons.csv")
setwd("D:\\STUDY PROCESS\\Excelr\\Assignments\\Completed\\Hypothesis testing Assignments")
Faltoons = read.csv("Faltoons.csv")
Faltoons
head(Faltoons)
head(Faltoons)
levels(Faltoons$Weekdays)
levels(Faltoons$Weekdays)
levels(Faltoons$Weekend)
df <-data.frame(factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekdays),labels = c(1,2))
,factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekend),labels = c(1,2)))
df
df
df <-data.frame("weekdays" = factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekdays),labels = c(1,2))
,"weekends"=factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekend),labels = c(1,2)))
df
head(df)
head(Faltoons)
levels(Faltoons$Weekdays)
head(df)
table(df)
as.matrix(table(df))
s <- as.matrix(table(df))
chisq.test(s)
df_falt = as.data.frame(cbind(c(Weekdays,Weekend),rep(c("Weekdays","Weekend"),c(400,400)))) # 1 for Female; and 2 for Male
colnames(df_falt) = c("Gender","Day")
head(df_falt)
Faltoons = read.csv("Faltoons.csv")
head(Faltoons)
#Data Manipulation
nrow(Faltoons) # 400 rows in the data
attach(Faltoons)
df_falt = as.data.frame(cbind(c(Weekdays,Weekend),rep(c("Weekdays","Weekend"),c(400,400)))) # 1 for Female; and 2 for Male
colnames(df_falt) = c("Gender","Day")
head(df_falt)
df_tab2 = table(df_falt);df_tab2
chisq.test(df_tab2) # P-value is 0.00008543 < 0.05 , Hence we reject the null hypothesis
chisq.test(s)
s
df_tab2
head(df)
table(df)
tabulate(df)
s <- as.matrix(table(df))
s
df_falt
s
df_tab2
head(df)
s <- table(df)
s
df <-data.frame("weekdays" = factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekdays),labels = c(1,2))
,"weekends"=factor(x = Faltoons$Weekdays,levels = levels(Faltoons$Weekend),labels = c(1,2)))
df
df$weekdays
table(df$weekdays)
table(df$weekends)
table(df$weekdays)
table(df$weekends)
table(df$weekdays)
table(df$weekends)
df_tab2 = table(df_falt);df_tab2
head(df_falt)
head(Faltoons)
head(Faltoons)
df <- gather(data = Faltoons,key = Day,value = Gender,1:2)
df
table(df)
df_1 <-table(df)
df_1
chisq.test(df_1)
chisq.test(df_tab2) # P-value is 0.00008543 < 0.05 , Hence we reject the null hypothesis
df_tab2
df_1
library(tidyr)
ls()
rm(list = list(ls()))
rm(list = list(ls()))
list(ls())
rm(list = ls())
rm(list = ls())
rm(ls())
rm(list =ls())
A <- c(1:10)
B <- c(2:11)
df <- data.frame(A,B)
df
df$A
df$B
c(df$A,df$B)
list(df$A,df$B)
c(df$A,df$B)
df_1 <- data.frame(c(df$A,df$B))
df_1
A <- c(1:10)
B <- c(12:21)
rbind(A,B)
rbind(c(A,B))
A <- rbind(c(A,B))
A
A <- cbind(c(A,B))
A <- c(1:10)
B <- c(12:21)
A <- cbind(c(A,B))
A <- c(1:10)
B <- c(12:21)
ff <- cbind(c(A,B))
ff
rm(ls())
rm(list =ls())
A <- c(rep(c("Aman","Jagadish"),3))
B <- 1:6
df_1 <- data.frame(A,B)
with(data = df_1)
with(data = df_1,expr = (A=="Aman"))
with(data = df_1,expr = (A=="Aman")) <- 1
df_1[with(data = df_1,expr = (A=="Aman"))]
df_1[with(data = df_1,expr = (A=="Aman")),]
with(data = df_1,expr = (A=="Aman"))
file.choose()
file.choose()
file.choose()
file.choose()
file.choose()
list.dirs()
list.files()
data()
data(storms)
data("storms")
library(dplyr)
data("storms")
list.files()
data("storms",)
rm(list =ls())
data("storms",)
data("storms",package = "dplyr")
data()
data("storms")
rm(list =ls())
data("storms")
rm(list =ls())
data("storms")
rm(list =ls())
data("storms")
rm(list =ls())
detach("package:dplyr", unload = TRUE)
data("storms")
data()
data("storms")
mtcars
volcano
mtcars
volcano
install("plot3D")
install.packages("plot3D")
library(plot3D)
plot3D::box3D(mtcars$mpg)
plot3D::box3D(x0 = mtcars$mpg,y0 = mtcars$cyl,z0 = mtcars$hp)
plot3D::box3D(x0 = mtcars$mpg,y0 = mtcars$cyl,z0 = mtcars$hp,x1 = mtcars$mpg,y1 = mtcars$cyl,z1 = mtcars$hp)
plot3D::box3D(x0 = mtcars$mpg,y0 = mtcars$cyl,z0 = mtcars$hp,x1 = mtcars$mpg,y1 = mtcars$cyl,z1 = mtcars$disp)
plot3D::contour3D(x = volcano)
plot3D::contour2D(x = volcano)
plot3D::contour2D(volcano)
plot3D::contour3D(volcano)
plot3D::contour2D(volcano)
plot3D::hist3D(x = 1:10,y = 1:10,z = 1:10)
plot3D::hist3D(x = 1:max(mtcars$mpg),y = 1:max(mtcars$mpg),z = mtcars$mpg)
plot3D::hist3D(x = 1:max(mtcars$mpg),y = 1:max(mtcars$mpg),z = volcano)
plot3D::hist3D(x = 1:nrow(volcano),y = 1:max(mtcars$mpg),z = volcano)
plot3D::hist3D(x = 1:nrow(volcano),y = 1:nrow(volcano),z = volcano)
plot3D::hist3D(x = 1:nrow(volcano),y = 1:ncol(volcano),z = volcano)
plot3D::image2D(volcano)
plot3D::image3D(x = 1:nrow(volcano),y = 1:ncol(volcano),z = volcano)
plot3D::image3D(x = 1,y = 1:ncol(volcano),z = volcano)
plot3D::image3D(x = 1,y = volcano,z = volcano)
