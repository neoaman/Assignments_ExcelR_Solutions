forestfire <- read.csv("forestfires.csv")
forestfire
head(forestfire)
library(kernlab)
library(caret)
str(forestfire)
head(forestfire)
normalize_dummy <- function(x){
col <- ncol(x)
row <- nrow(x)
y <- 1:nrow(x)
for (i in 1:col){
if(class(x[,i])=="numeric" | class(x[,i])=="integer")
{
minx <- min(x[,i])
maxx <- max(x[,i])
for(j in 1:row)
{
x[j,i] <- ifelse((x[j,i] - minx) != 0,yes =((x[j,i] - minx) / (maxx - minx)),no = 0)
}
}
}
f <- c()
for(i in 1:ncol(x)){
if(class(x[,i])=="factor"){
dummies <- data.frame(dummies::dummy(x[,i]))
y <- data.frame(y,dummies)
f <- c(f,i)
}
else{
next
}
}
if(is.null(f)){
output <- x
}
else{output <- data.frame(x[,-f],y[,-1])}
return(output)
}
norm_ff <- normalize_dummy(forestfire)
norm_ff
dim(norm_ff)
dim(forestfire)
split <- sample(nrow(norm_ff), nrow(FF)*0.7, replace = TRUE)
split <- sample(nrow(norm_ff), nrow(norm_ff)*0.7, replace = TRUE)
# Data Partition
set.seed(101)
split <- sample(nrow(norm_ff), nrow(norm_ff)*0.7, replace = TRUE)
split
train_ff <- norm_ff[split,]
test_ff  <- norm_ff[-split,]
test_ff
modelF1<-ksvm(size_category~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladots")
train_ff
dim(forestfire)
norm_ff <- normalize_dummy(forestfire[,-31])
dim(norm_ff)
norm_ff
# Train and Test Splitting
set.seed(101)
split <- sample(nrow(norm_ff), nrow(norm_ff)*0.7, replace = TRUE)
train_ff <- norm_ff[split,]
test_ff  <- norm_ff[-split,]
forestfire$size_category
forestfire$size_category
forestfire$size_category[split]
modelF1<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladots")
modelF1<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladot")
modelF1
modelF1<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladot")
PredArea1 <- predict(modelF1, test_ff)
table(PredArea1,forestfire$size_category[-split])
PredArea1 <- predict(modelF1, test_ff)
table(PredArea1,forestfire$size_category[-split])
table(Predicted=PredArea1,Actual=forestfire$size_category[-split])
methods <- c(“rbfdot”, “polydot”, “tanhdot”, “vanilladot”, “laplacedot”, “besseldot”, “anovadot”, “splinedot”, “matrix”)
methods <- c( “rbfdot”, “polydot”, “tanhdot”, “vanilladot”, “laplacedot”, “besseldot”, “anovadot”, “splinedot”, “matrix”)
methodss <- c( “rbfdot”, “polydot”, “tanhdot”, “vanilladot”, “laplacedot”, “besseldot”, “anovadot”, “splinedot”, “matrix”)
methodss <- c( "rbfdot", "polydot", "tanhdot", "vanilladot", "laplacedot", "besseldot", "anovadot", "splinedot", "matrix")
normalize_dummy <- function(x){
col <- ncol(x)
row <- nrow(x)
y <- 1:nrow(x)
for (i in 1:col){
if(class(x[,i])=="numeric" | class(x[,i])=="integer")
{
minx <- min(x[,i])
maxx <- max(x[,i])
for(j in 1:row)
{
x[j,i] <- ifelse((x[j,i] - minx) != 0,yes =((x[j,i] - minx) / (maxx - minx)),no = 0)
}
}
}
f <- c()
for(i in 1:ncol(x)){
if(class(x[,i])=="factor"){
dummies <- data.frame(dummies::dummy(x[,i]))
y <- data.frame(y,dummies)
f <- c(f,i)
}
else{
next
}
}
if(is.null(f)){
output <- x
}
else{output <- data.frame(x[,-f],y[,-1])}
return(output)
}
methodss
SVMinfo = list()
SVMinfo = list()
SVMtable = list()
for (i in methodss){
modelF<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladot")
SVMinfo[[i]] <- predict(modelF, test_ff)
SVMtable[[i]] <- mean(PredArea==forestfire$size_category[-split])
}
SVMinfo = list()
SVMtable = list()
for (i in methodss){
modelF<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = "vanilladot")
PredArea <- predict(modelF, test_ff)
SVMinfo[[i]] <- PredArea
SVMtable[[i]] <- mean(PredArea==forestfire$size_category[-split])
}
SVMtable
SVMinfo = list()
SVMtable = list()
for (i in methodss){
modelF<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = i)
PredArea <- predict(modelF, test_ff)
SVMinfo[[i]] <- PredArea
SVMtable[[i]] <- mean(PredArea==forestfire$size_category[-split])
}
SVMtable
SVMinfo = list();SVMtable = list();SVMAccu = list()
for (i in methodss){
modelF<-ksvm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff,kernel = i)
PredArea <- predict(modelF, test_ff)
SVMinfo[[i]] <- PredArea
SVMtable[[i]] <- table(Predicted=PredArea,Actual=forestfire$size_category[-split])
SVMAccu[[i]] <- mean(PredArea==forestfire$size_category[-split])
}
SVMtable
SVMAccu
SVMinfo
SVMtable
SVMAccu
plot(modelF1)
plot(modelF1,train_ff)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
library(e1071)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
plot(modelF1,train_ff)
modelF2 <- svm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff)
PredArea1 <- predict(modelF2, test_ff)
PredArea2 <- predict(modelF2, test_ff)
table(Predicted=PredArea2,Actual=forestfire$size_category[-split])
plot(modelF2,train_ff)
modelF2 <- svm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff)
PredArea2 <- predict(modelF2, test_ff)
table(Predicted=PredArea2,Actual=forestfire$size_category[-split])
plot(modelF2,train_ff)
modelF2 <- svm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff)
plot(modelF2,train_ff)
plot.svm(modelF2,train_ff)
library(e1071)
modelF2 <- svm(forestfire$size_category[split]~temp+rain+wind+RH,
data= train_ff)
PredArea2 <- predict(modelF2, test_ff)
table(Predicted=PredArea2,Actual=forestfire$size_category[-split])
plot(modelF2,train_ff)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
m
modelF2
plot(m, cats)
cats
train_ff
plot(modelF2,train_ff[1:3])
plot(modelF2,forestfire)
plot(modelF2,train_ff)
train_salary <- read.csv("SalaryData_Train(1).csv")
test_salary <- read.csv("SalaryData_Test(1).csv")
head(train_salary)
head(train_salary)
normalize_dummy(train_salary)
head(train_salary)
modelS1 <- ksvm(Salary~.,data=train_ff)
train_ff
modelS1 <- ksvm(Salary~.,data=train_salary)
predS1 <- predict(modelS1,test_salary)
table(test_salary,predS1)
table(test_salary$Salary,predS1)
mean(test_salary$Salary==predS1)
methodss
SVMinfo2 <- list()
SVMtable2 <- list()
SVMAccu2 <- list()
SVMinfo2 <- list()
SVMtable2 <- list()
SVMAccu2 <- list()
for(i in methodss){
modelS <- ksvm(Salary~.,data=train_salary,kernel = i)
predS <- predict(modelS,test_salary)
SVMinfo2[[i]] <- predS
SVMtable2[[i]] <- table(test_salary$Salary,predS)
SVMAccu2[[i]] <- mean(test_salary$Salary==predS)
}
SVMAccu2
SVMinfo2
SVMtable2
SVMtable2$vanilladot
SVMAccu2 # Here I am getting my most accuracy using my karnel method as vanilladot
SVMinfo2$vanilladot
SVMtable2$vanilladot
SVMAccu2 # Here I am getting my most accuracy using my karnel method as vanilladot i.e. 0.8562815
SVMinfo2$vanilladot
SVMtable2$vanilladot
head(forestfire)
str(forestfire)
dim(forestfire)
dim(norm_ff)
# Train and Test Splitting
set.seed(101)
split <- sample(nrow(norm_ff), nrow(norm_ff)*0.7, replace = TRUE)
train_ff <- norm_ff[split,]
test_ff  <- norm_ff[-split,]
SVMinfo
SVMtable
SVMAccu
table(forestfire$size_category)
SVMAccu2 # Here I am getting my most accuracy using my karnel method as vanilladot i.e. 0.8562815
SVMinfo2$vanilladot
SVMtable2$vanilladot
SVMtable2$rb
SVMtable2$van
SVMtable2$rb
SVMtable2$vanilladot
SVMtable2$rbfdot
SVMtable2$laplacedot
MLmetrics::F1_Score(SVMtable2$vanilladot)
MLmetrics::F1_Score(y_pred = SVMinfo$rbfdot,y_true = test_salary$Salary)
MLmetrics::F1_Score(y_pred = SVMinfo2$rbfdot,y_true = test_salary$Salary)
MLmetrics::F1_Score(y_pred = SVMinfo2$vanilladot,y_true = test_salary$Salary)
MLmetrics::F1_Score(y_pred = SVMinfo2$laplacedot,y_true = test_salary$Salary)
MLmetrics::F1_Score(y_true = SVMinfo$vanilladot,y_pred =forestfire$size_category[-split] )
forestfire$size_category[-split]
SVMinfo$vanilladot
MLmetrics::F1_Score(y_pred = SVMinfo$vanilladot,y_true =forestfire$size_category[-split] )
SVMinfo$vanilladot
forestfire$size_category[-split]
SVMinfo$vanilladot
MLmetrics::F1_Score(y_pred = SVMinfo$vanilladot,y_true =forestfire$size_category[-split] )
MLmetrics::F1_Score(y_pred = SVMinfo$rbfdot,y_true =forestfire$size_category[-split] )
MLmetrics::F1_Score(y_pred = SVMinfo$laplacedot,y_true =forestfire$size_category[-split] )
SVMinfo
SVMtable
SVMAccu
MLmetrics::F1_Score(y_pred = SVMinfo$tanhdot,y_true =forestfire$size_category[-split] )
SVMAccu2 # Here I am getting my most accuracy using my karnel method as vanilladot i.e. 0.8562815
SVMinfo2
SVMtable2
