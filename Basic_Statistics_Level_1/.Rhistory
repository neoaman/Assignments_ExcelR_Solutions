}###
library(ibmdbR)
host.name <- "dashdb-txn-sbox-yp-lon02-01.services.eu-gb.bluemix.net"
port <-"50000" # 50000 if not using SSL or 50001 if using SSL
user.name <-"zxd47287"
pwd <- "twmpfrh7vcm8t^rp"
con.text <- paste("placeholderForYourDSNName;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
idaShowTables()
con.text <- paste("db2;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
idaShowTables()
install.packages("ibmdbR")
library(ibmdbR)
host.name <- "dashdb-txn-sbox-yp-lon02-01.services.eu-gb.bluemix.net"
port <-"50000" # 50000 if not using SSL or 50001 if using SSL
user.name <-"zxd47287"
pwd <- "twmpfrh7vcm8t^rp"
con.text <- paste("db2;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
con.text <- paste("odbc;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
con.text <- paste("Db2-s4;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
con.text <- paste("jdbc;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
idaShowTables()
con.text <- paste("odbc;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
con.text <- paste("db2;DRIVER=BLUDB",
";Database=BLUDB",
";Hostname=",host.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
# Connect to using a odbc Driver Connection string to a remote database
con <- idaConnect(con.text)
Map()
Map(f = A)
a  = "Aman"
a.char()
nchar(a)
character(a)
a.nchar()
length(a)
hw = c("hellow","World")
paste(hw)
paste(hw,collapse = " ")
a = "2020-01-01"
as.Date(a)
date(a)
date("2020-01-01")
library(RODBC)
dsns <- odbcDataSources()
names(dsns)
print(dsns["names(dsns)"])
print(dsns[names(dsns)])
t.test
?t.test
A = "AMAN"
rm.ls()
ls()
ls(rm)
rm.ls()
rm(ls())
rm(list)
rm(list=ls())
rm(ls())
rm(list = ls())
A = "AMAN"
rm(list = ls())
install.packages("ROCR")
Bag <- c("R","R","G","G","G","B","B")
sample(x = Bag,size = 2,replace = False)
sample(x = Bag,size = 2,replace = F)
sample(x = Bag,size = 2,replace = F)
sample(x = Bag,size = 2,replace = F)
sample(x = Bag,size = 2,replace = F)
sample(x = Bag,size = 2,replace = F)
combn(Bag)
combn(x = Bag,m = 2)
ncol(combn(x = Bag,m = 2))
table(combn(x = Bag,m = 2))
prop.table(combn(x = Bag,m = 2))
prob.table(combn(x = Bag,m = 2))
table(combn(x = Bag,m = 2))
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c("Head","Tail")
Coin
combn(x = Coin,m = 3)
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c("Head","Tail")
combn(x = Coin,m = 3)
combn(x = Coin,m = 3,replace=T)
combn(x = Coin,m = 3)
combn(x = Coin,m = 2)
combn(x = Coin,m = 3)
combn(x = Coin,m = 3,simplify = True)
combn(x = Coin,m = 3,simplify = TRUE)
Toss <- sample(Coin, 90,replace = T)
Toss
table(Toss)
Toss <- sample(Coin, 18,replace = T)
Toss
Toss <- sample(Coin, 180,replace = T)
Toss
cbind(Toss1,Toss2,Toss3)
Toss1 <- sample(Coin, 180,replace = T)
Toss2 <- sample(Coin, 180,replace = T)
Toss3 <- sample(Coin, 180,replace = T)
cbind(Toss1,Toss2,Toss3)
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c(1,0)
Toss1 <- sample(Coin, 180,replace = T)
Toss2 <- sample(Coin, 180,replace = T)
Toss3 <- sample(Coin, 180,replace = T)
cbind(Toss1,Toss2,Toss3)
df = cbind(Toss1,Toss2,Toss3)
sum(df)
rowsum(df)
rowsum(x = df)
rowsum(x = df,group = 1)
rowsum(x = df,group = "1")
rowSums(df)
table(rowSums(df))
prop.table(table(rowSums(df)))
3/8
3/8
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c(1,0)
Toss1 <- sample(Coin, 180,replace = T)
Toss2 <- sample(Coin, 180,replace = T)
Toss3 <- sample(Coin, 180,replace = T)
df = cbind(Toss1,Toss2,Toss3)
table(rowSums(df))
prop.table(table(rowSums(df)))
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c(1,0)
Toss1 <- sample(Coin, 180,replace = T)
Toss2 <- sample(Coin, 180,replace = T)
Toss3 <- sample(Coin, 180,replace = T)
df = cbind(Toss1,Toss2,Toss3)
table(rowSums(df))
prop.table(table(rowSums(df)))
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c(1,0)
Toss1 <- sample(Coin, 18000,replace = T)
Toss2 <- sample(Coin, 18000,replace = T)
Toss3 <- sample(Coin, 18000,replace = T)
df = cbind(Toss1,Toss2,Toss3)
table(rowSums(df))
prop.table(table(rowSums(df)))
# Q3- Three Coins are tossed, find the probability that two heads and one tail are obtained ?
#Ans:
Coin <- c(1,0)
Toss1 <- sample(Coin, 1800000,replace = T)
Toss2 <- sample(Coin, 1800000,replace = T)
Toss3 <- sample(Coin, 1800000,replace = T)
df = cbind(Toss1,Toss2,Toss3)
table(rowSums(df))
prop.table(table(rowSums(df)))
combn(x = Bag,m = 2)
1-((2/7)*(1/6))+(2/7)
1-(((2/7)*(1/6))+(2/7))
(2/7)*(1/6)
(2/7)
1-(((2/7)*(1/6))+(2/7))
10/21
# Dplyr
install.packages("dplyr")
library(dplyr)
set.seed(10)
X <- runif(50)
set.seed(10)
Y <- runif(50)
df = cbind(X,Y)
plot(df)
set.seed(10)
X <- runif(50)
set.seed(15)
Y <- runif(50)
df = cbind(X,Y)
plot(df)
set.seed(10)
X <- runif(50)
set.seed(15)
Y <- runif(50)
df = cbind(X,Y)
plot(df)
install.packages("animation")
library(animation)
km <- kmeans.ani(df,4)
km <- kmeans.ani(df,4)
km$centers
km <- kmeans.ani(df,4)
km$centers
km = kmeans(df,4)
km$centers
km = kmeans(df,4)
km$centers
km$centers
km$centers
km$centers
km = kmeans(df,4)
km$centers
km = kmeans(df,4)
km$centers
km1 <- kmeans.ani(df,4)
km1$centers
km = kmeans(df,4)
km$centers
km1 <- kmeans.ani(df,4)
km1$centers
km1[]
km[]
km1$centers
km1 <- kmeans.ani(df,4)
km$withinss
km$tot.withinss
for (i in 2:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
wss <- c()
for (i in 2:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
wss
plot(1:15,wss)
plot(1:15,wss,type = "b")
wss <- c();for (i in 2:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
wss <- c();for (i in 6:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
k<-kmeans(df,1);wss <- k$tot.withinss;
for (i in 6:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
k<-kmeans(df,1);wss <- k$tot.withinss;
for (i in 5:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
k<-kmeans(df,1);wss <- k$tot.withinss;
for (i in 2:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
k<-kmeans(df,1);wss <- k$tot.withinss;
for (i in 5:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
k<-kmeans(df,1);wss <- k$tot.withinss;
for (i in 1:15){
k <- kmeans(df,i)
wss[i] <- k$tot.withinss
}
plot(1:15,wss,type = "b")
qnorm(p = 0.94,mean = 200,sd = 30)
qnorm(p = 0.94,mean = 200,sd = 30)
qnorm(p = 0.98,mean = 200,sd = 30)
qnorm(p = 0.96,mean = 200,sd = 30)
qnorm(p = 0.94,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.98,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.96,mean = 200,sd = 30,lower.tail = F)
# Q11 : Average weight
qnorm(p = 0.94,mean = 200,sd = 30)
qnorm(p = 0.94,mean = 200,sd = 30,lower.tail = F)
246.6432+153.3568
246.6432-153.3568
qnorm(p = 0.94,mean = 200,sd = 30)
qnorm(p = 0.94,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.98,mean = 200,sd = 30)
qnorm(p = 0.98,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.96,mean = 200,sd = 30)
qnorm(p = 0.96,mean = 200,sd = 30,lower.tail = F)
a <- c(34,36,36,38,38,39,39,40,40,41,41,41,41,42,42,45,49,56)
mean(a);median(a);var(a);sd(a)
hist(a)
shapiro.test(a)
which.max(tabulate(a))
setwd("D:\\STUDY PROCESS\\Excelr\\Assignments\\Basic Statistics Level 1")
df = read.csv(cars.csv)
df = read.csv(Cars.csv)
df = read.csv("Cars.csv")
df
prop.table(df$MPG>38)
prop.table(tabulate(df$MPG>38))
prop.table(df$MPG>38)
table(prop.table(df$MPG>38))
table(df$MPG)
table(df$MPG>38)
prop.table(table(df$MPG>38))
prop.table(table(df$MPG<40))
table(df$MPG<40)
table(df$MPG < 50 & df$MPG > 20)
table(df$MPG > 20)
table(df$MPG < 50)
81-12
table(df$MPG < 50 & df$MPG > 20)
prop.table(table(df$MPG < 50 & df$MPG > 20))
shapiro.test(df$MPG)
setwd("D:\\STUDY PROCESS\\Excelr\\Assignments\\Basic Statistics Level 1")
df = read.csv("wc-at.csv")
df
head(df)
shapiro.test(df$AT)
shapiro.test(df$Waist)
hist(df$AT)
hist(df$Waist)
qnorm(0.9)
qnorm(0.9,lower.tail = F)
qnorm(0.94,lower.tail = F)
2*qnorm(0.9,lower.tail = F)
2*qnorm(0.94,lower.tail = F)
2*qnorm(0.9)
# Q11 : Average weight
2*qnorm(p = 0.94,mean = 200,sd = 30)
# Q11 : Average weight
qnorm(p = 0.95,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.975,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.95,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.925,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.95,mean = 0,sd = 1)
# Q11 : Average weight
2*qnorm(p = 0.95,mean = 0,sd = 1)
# Q11 : Average weight
2*qnorm(p = 0.05,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.05,mean = 0,sd = 1)
# Q11 : Average weight
qnorm(p = 0.025,mean = 0,sd = 1)
qnorm(p = 0.97,mean = 200,sd = 30)
qnorm(p = 0.97,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.99,mean = 200,sd = 30)
qnorm(p = 0.99,mean = 200,sd = 30,lower.tail = F)
qnorm(p = 0.98,mean = 200,sd = 30)
qnorm(p = 0.98,mean = 200,sd = 30,lower.tail = F)
# Q11 : Average weight
200 +
qnorm(p = 0.97,mean = 0,sd = 1)
# Q11 : Average weight
200 +
qnorm(p = 0.97)
# Q11 : Average weight
200 +
qnorm(p = 0.97)
# Q11 : Average weight
200
qnorm(p = 0.97)
qnorm(p = 0.94)
2*qnorm(p = 0.94)
2*qnorm(p = 0.95)
qnorm(p = 0.975)
qnorm(p = 0.97)
# Q11 : Average weight
200+(1.880794*(30/sqrt(2000)))
200-(1.880794*(30/sqrt(2000)))
qnorm(p = 0.99)
200+(2.326348*(30/sqrt(2000)))
200-(2.326348*(30/sqrt(2000)))
qnorm(p = 0.98)
200+(2.053749*(30/sqrt(2000)))
200-(2.053749*(30/sqrt(2000)))
qnorm(0.95)
qnorm(0.95)
qnorm(0.97)
qnorm(0.8)
2*qnorm(0.90,lower.tail = F)
2*qnorm(0.95)
2*pnorm(0.95)
2*pnorm(0.90)
pnorm(0.90)
qnorm(0.90)
pnorm(0.90)+qnorm(0.90)
pnorm(1.6)
pnorm(1.96)
2*qnorm(0.05)
qnorm(0.05)
2*qnorm(p = 0.90)
qnorm(p = 0.90)
2*qnorm(p = 0.95)
qt(p = 0.975,df = 24)
qt(p = 0.975,df = 24,lower.tail = F)
qt(p = 0.98,df = 24,lower.tail = F)
qt(p = .995,df = 24,lower.tail = F)
qt(p = 0.005,df = 24,lower.tail = F)
pt(q = 260,df = 17)
pt(q = 250,df = 17)
pt(q = 260,df = 17)
qt(p = 0.95,df = 17 )
pt(1.739,df = 17)
(260-270)/(90/sqrt(18))
pt(-0.4714045,df = 17)
pt(0.4714045,df = 17)
pt(-0.4714045,df = 17)
# Question 7
q7 <- read.csv("Q7.csv")
q7
df_1 = q7[,2:4]
hist(df_1$Points)
hist(df_1$Score)
hist(df_1$Weigh)
hist(df_1$Score)
hist(df_1$Weigh)
install.packages("moments")
library(moments)
moments::skewness(df1_$Score)
moments::skewness(df_1$Score)
skewness(df_1$Score)
kurtosis(df_1$Score)
moments::kurtosis(df_1$Score)
moments::kurtosis(df_1$Score)[]
kurtosis(df_1$Score)[]
skewness(df_1$Score)[]
moments::skewness(df_1$Score)[]
skewness(df_1$Score)[]
moments::skewness(df_1$Score)[]
df_1$Score
skewness(df_1$Score)[]
?skewness
skewness(c(1:10))
skewness(c(1:10,20))
skewness(c(20:30,200))
skewness(c(20:30,2000))
skewness(c(20:30,200000000))
skewness(c(20:30,0))
skewness(c(200:300,0))
skewness(c(2000:3000,0))
skewness(c(200:300,0))
skewness(c(200:300,10))
skewness(c(2000:2050,10))
skewness(c(2000:2001,10))
skewness(c(2000:2005,10))
skewness(c(2000:20010,10))
skewness(c(2000:2010,10))
skewness(df_1$Weigh)[]
skewness(df_1$Score)[]
skewness(df_1$Points)[]
